import json
import datetime
import os
import time

import requests
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.support.wait import WebDriverWait
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.support import expected_conditions as ec
from selenium.webdriver import Keys
from selenium.webdriver.common.action_chains import ActionChains
import Methods
import site_objects
import various_data
from various_data import *

# –ó–∞–ø—É—Å–∫ –¥—Ä–∞–π–≤–µ—Ä–∞
def driver_start():
    driver = None

    try:
        chrome_options = webdriver.ChromeOptions()

        # –î–æ–±–∞–≤–∏–º —Ñ–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
        # chrome_options.add_argument('--headless')
        # –î–æ–±–∞–≤–∏–º —Ä–µ–∂–∏–º –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ
        # chrome_options.add_argument('--incognito')

        chrome_options.add_argument('--window-size=1920,1080')
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-cache')
        chrome_options.add_argument('--disable-blink-features=AutomationControlled')
        # chrome_options.add_argument('--incognito')

        prefs = {"download.default_directory": f"{os.getcwd()}\\downloads"}

        chrome_options.add_experimental_option('excludeSwitches', ['enable-automation'])
        chrome_options.add_experimental_option("prefs", prefs)

        driver = webdriver.Chrome(options=chrome_options)  # service=ChromeService(ChromeDriverManager().install()),

        # # –ü—Ä–∏–∫—Ä—É—Ç–∏–º –¥—Ä–∞–π–≤–µ—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
        # driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=chrome_options)
        driver.implicitly_wait(5)

    except Exception as e:
        err = f"\n–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥—Ä–∞–π–≤–µ—Ä–∞:"
        send_message_tg(f'{err}\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ\n{e}', token, chat_id)

    return driver


# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–ª–µ–≥—É
def send_message_tg(msg, token, chat_id):

    headers = {'Content-Type': 'application/json'}
    body = json.dumps({
        "chat_id": chat_id,
        "text": msg,
        "disable_notification": False
    })

    url = f"https://api.telegram.org/bot{token}/sendMessage"
    requests.post(url, headers=headers, data=body)
    return msg

def send_photo_tg(params, token, chat_id,  desc=''):

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ (–µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞–¥–∏–º)
    if not os.path.isdir("screenshots"):
        os.mkdir(os.getcwd() + '\\screenshots')

    # –ü—Ä–∏–¥—É–º–∞–µ–º –∏–º—è —Å–∫—Ä–∏–Ω—à–æ—Ç—É (–ø–æ–¥–≥–æ–Ω–∏–º –∫ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è)
    actual_date = datetime.datetime.now().strftime("%H.%M.%S %d.%m.%Y")

    # –ó–∞–º–µ–Ω–∏–º –ø—Ä–æ–±–µ–ª—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Ç–µ—Å—Ç–∞ –Ω–∞ "_"
    # desc_corr_format = '_'.join(description.split())
    name_screenshot = f'error_{actual_date}.png'

    # –ù–∞–π–¥–µ–º –∏ –æ—Ç–∫—Ä–æ–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ —Ä–µ–∂–∏–º–µ —á—Ç–µ–Ω–∏—è
    file_path = f'{os.getcwd()}\\screenshots\\{name_screenshot}'

    # –°–¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    params.save_screenshot(file_path)
    img = open(file_path, 'rb')

    url = f'https://api.telegram.org/bot{token}/sendPhoto?chat_id={chat_id}&show_caption_above_media=True&caption=üî¥{desc}'
    requests.post(url, files={'photo': img})


# —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def calc_partners_stat():
    current_hour = datetime.datetime

# –£–∑–Ω–∞—Ç—å chat_id
#TOKEN = "6951649128:AAHb3triQhmOw7omlTsVyN8waiTzurvvzjI"
#url = f"https://api.telegram.org/bot{TOKEN}/getUpdates"
#print(requests.get(url).json())


# def send_report(params, msg):
#
#     send_message_tg(msg)
#     #send_photo_tg()
#     params.close()
#     params.quit()


def authorization_lk(params, domain):

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        Methods.set_page(params, domain)
        Methods.wait_page(params, domain)
        Methods.price_to_load(params)

        # –ê–≤—Ç–æ—Ä–∏–∑–æ–≤—ã–≤–∞–µ–º—Å—è
        Methods.find_el(params, site_objects.btn_personal_area.xpath)
        Methods.click(params)
        Methods.find_el(params, site_objects.inp_login.xpath)
        Methods.send_keys(params, '79990220038')
        Methods.find_el(params, site_objects.btn_continue.xpath)
        Methods.click(params)
        Methods.find_el(params, site_objects.inp_password.xpath)
        Methods.send_keys(params, 'an2015906')
        Methods.find_el(params, site_objects.btn_login.xpath)
        Methods.click(params)

        Methods.find_el(params, site_objects.img_logo_lk.xpath)

    except Exception:
        pass


def success_request_for_transportation(serial_number):

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ —Ñ–∞–π–ª)
    if not os.path.isdir("request_for_transportation"):
        os.mkdir(os.getcwd() + '\\request_for_transportation')
    if not os.path.exists('request_for_transportation/request_for_transportation.txt'):
        with open('request_for_transportation/request_for_transportation.txt', 'w') as f:
            f.write('0')

    file_data_iteration = open('request_for_transportation/request_for_transportation.txt', 'r')
    read_file = file_data_iteration.read()  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    if read_file == '':
        read_file = 0
    result = str(int(read_file) + serial_number)

    with open('request_for_transportation/request_for_transportation.txt', 'w') as f:
        f.write(result)

    # –ü—Ä–æ–≤–µ—Ä–∏–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–æ–≤–Ω–æ —Ä–∞–∑ –≤ —á–∞—Å –≤ —Ç–µ–ª–µ–≥—É
    used_hour = recording_capability()
    if used_hour is True and result != '1':
        send_message_tg(f'üü¢ –ó–∞—è–≤–æ–∫ –∑–∞ —á–∞—Å: {result}', token, group_id_predprod)  # –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –≥—Ä—É–ø–ø—É
        with open('request_for_transportation/request_for_transportation.txt', 'w') as f:
            f.write('0')

    return result


def recording_capability():

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ —Ñ–∞–π–ª)
    if not os.path.exists('request_for_transportation/used_hour.txt'):
        with open('request_for_transportation/used_hour.txt', 'w') as f:
            f.write('0')

    time_now = datetime.datetime.now()
    current_time_hour = time_now.hour
    capability = None

    used_hour = open('request_for_transportation/used_hour.txt', 'r')
    last_record_time = used_hour.read()  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

    #  –ø—Ä–æ–≤–µ—Ä–∏–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –≤—Ä–µ–º—è –≤ —Ñ–∞–π–ª–µ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
    if current_time_hour in range(0, 25) and current_time_hour != int(last_record_time):
        capability = True

        now_hour = str(current_time_hour)
        with open('request_for_transportation/used_hour.txt', 'w') as f:
            f.write(now_hour)

    return capability


def record_timer(func, session):

    """–ö–∞–∂–¥—ã–π —Ä–∞–∑ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥—Ä–∞–π–≤–µ—Ä–∞ (—Å –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–µ–π —Ä–∞–∑–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç)"""

    start = time.time()
    desc = func(session)  # ('–¢–µ—Å—Ç ‚Ññ61 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≥—Ä—É–∑–∞', {'–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏': False}, None, None)
    end = time.time()

    result = end - start
    # –≤–æ–∑–≤—Ä–∞—Ç –æ–ø–∏—Å–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Ö–æ–¥–∞
    return list(desc)[0], list(desc)[1], round(result, 2)


def tst_passed(status, description):

    """–¢—É—Ç –∏–¥–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö/–Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    if status is True:
        status_passed = True
        return status_passed, description
    else:
        status_passed = False
        return status_passed, description



